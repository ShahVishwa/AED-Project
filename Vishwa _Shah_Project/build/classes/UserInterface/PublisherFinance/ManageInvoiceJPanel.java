/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PublisherFinance;

import Business.Employee.PublisherFinance;
import Business.Enterprise.Enterprise;
import Business.PublisherFinance.Invoice;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vishwa
 */
public class ManageInvoiceJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount account;
    private Enterprise enterprise;
    private PublisherFinance pf;

    /**
     * Creates new form ManageInvoiceJPanel
     */
    public ManageInvoiceJPanel(JPanel userProcessContainer,UserAccount account,Enterprise enterprise,PublisherFinance pf) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.pf = pf;
        populateInvoiceTable();
    }
    
    private void populateInvoiceTable()
    {
        DefaultTableModel dtm = (DefaultTableModel)invoiceJTable.getModel();
        dtm.setRowCount(0);
        for(Invoice invoice : pf.getInvoiceHistory().getInvoiceList())
        {
            Object[] row = new Object[4];
            row[0] = invoice.getInvoiceID();
            row[1] = invoice.getOrder().getOrderNo();
            row[2] = invoice.getInvoiceDate();
            row[3] = invoice.getCostPerImpression();
            dtm.addRow(row);
        }
    }
    
    private void populateInvoiceTable(int number)
    {
        DefaultTableModel dtm = (DefaultTableModel)invoiceJTable.getModel();
        dtm.setRowCount(0);
        for(Invoice invoice : pf.getInvoiceHistory().getInvoiceList())
        {
            if(number == invoice.getInvoiceID())
            {
                Object[] row = new Object[4];
                row[0] = invoice.getInvoiceID();
                row[1] = invoice.getOrder().getOrderNo();
                row[2] = invoice.getInvoiceDate();
                row[3] = invoice.getCostPerImpression();
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        addInvoiceJButton = new javax.swing.JButton();
        removeJButton = new javax.swing.JButton();
        searchInvoiceJTextField = new javax.swing.JTextField();
        refreshJButton = new javax.swing.JButton();
        addRequestJButton = new javax.swing.JButton();
        searchInvoiceJButton = new javax.swing.JButton();

        invoiceJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Invoice ID", "Order No.", "Invoice Date", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(invoiceJTable);

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        addInvoiceJButton.setText("Add Invoice");
        addInvoiceJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInvoiceJButtonActionPerformed(evt);
            }
        });

        removeJButton.setText("Remove");
        removeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        addRequestJButton.setText("Add Request");
        addRequestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRequestJButtonActionPerformed(evt);
            }
        });

        searchInvoiceJButton.setText("Search Invoice");
        searchInvoiceJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInvoiceJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backJButton)
                                .addGap(50, 50, 50)
                                .addComponent(refreshJButton)
                                .addGap(40, 40, 40)
                                .addComponent(removeJButton)
                                .addGap(18, 18, 18)
                                .addComponent(addInvoiceJButton)
                                .addGap(31, 31, 31)
                                .addComponent(addRequestJButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(searchInvoiceJButton)
                                .addGap(50, 50, 50)
                                .addComponent(searchInvoiceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 54, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchInvoiceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchInvoiceJButton))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addInvoiceJButton)
                    .addComponent(removeJButton)
                    .addComponent(refreshJButton)
                    .addComponent(backJButton)
                    .addComponent(addRequestJButton))
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addInvoiceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInvoiceJButtonActionPerformed
        AddInvoiceJPanel aijp = new AddInvoiceJPanel(userProcessContainer,pf);
        userProcessContainer.add("AddInvoiceJPanel",aijp);
        ((CardLayout)userProcessContainer.getLayout()).next(userProcessContainer);
    }//GEN-LAST:event_addInvoiceJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        ((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void searchInvoiceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInvoiceJButtonActionPerformed
        try{
        int ID = Integer.parseInt(searchInvoiceJTextField.getText());
            populateInvoiceTable(ID);
        }
        catch(NumberFormatException ne)
        {
            JOptionPane.showMessageDialog(null, "Enter a valid String");
            return;
        }
        
    }//GEN-LAST:event_searchInvoiceJButtonActionPerformed

    private void removeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJButtonActionPerformed
        int selectRow = invoiceJTable.getSelectedRow();
        
        if(selectRow < 0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row from the Table");
            return;
        }
        int selectedValue = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove? ","Warning",JOptionPane.YES_NO_OPTION);
        if(selectedValue == JOptionPane.NO_OPTION)
        {
            return;
        }
        else
        {
            Invoice invoice = (Invoice)invoiceJTable.getValueAt(selectRow, 0);
            pf.getInvoiceHistory().removeInvoice(invoice);
            populateInvoiceTable();
        }
    }//GEN-LAST:event_removeJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateInvoiceTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void addRequestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRequestJButtonActionPerformed
        int selectRow = invoiceJTable.getSelectedRow();
        
        if(selectRow < 0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row from the Table");
            return;
        }
        else
        {
            Invoice invoice = (Invoice)invoiceJTable.getValueAt(selectRow, 0);
            AddRequestJPanel arjp = new AddRequestJPanel(userProcessContainer, account,invoice,enterprise);
            userProcessContainer.add("AddRequestJPanel",arjp);
            ((CardLayout)userProcessContainer.getLayout()).next(userProcessContainer);
        }
    }//GEN-LAST:event_addRequestJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addInvoiceJButton;
    private javax.swing.JButton addRequestJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable invoiceJTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton removeJButton;
    private javax.swing.JButton searchInvoiceJButton;
    private javax.swing.JTextField searchInvoiceJTextField;
    // End of variables declaration//GEN-END:variables
}
